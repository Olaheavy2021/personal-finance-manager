name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_id || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: build-and-test-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]

    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Add .NET global tools to PATH
        run: echo "${{ env.HOME }}/.dotnet/tools" >> $GITHUB_PATH

      - name: Install coverage tools
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet tool install --global dotnet-coverage

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-restore --verbosity normal

      - name: Run tests with coverage
        run: |
          dotnet coverage collect dotnet test \
            --output ${{ github.workspace }}/Tests/Coverage \
            --output-format cobertura \
            --settings CodeCoverage.runsettings

      # 1) capture where our merged report will live
      - name: Set output-folder
        id: variables
        run: |
          OUTPUT="${{ github.workspace }}/Tests/coveragereport"
          echo "output-folder=${OUTPUT}" >> $GITHUB_OUTPUT

      # 2) merge all cobertura.xmls, generate HTML + Markdown summary
      - name: Merge Coverage Reports
        run: |
          echo "Merging Coverage Reports"
          reportgenerator \
            "-reports:${{ github.workspace }}/Tests/Coverage/**/*.cobertura.xml" \
            "-targetdir:${{ steps.variables.outputs.output-folder }}" \
            -reporttypes:Html;MarkdownSummaryGithub;Cobertura \
            -filefilters:-*.g.cs
          ls -la "${{ steps.variables.outputs.output-folder }}"

      # 3) Append the Markdown summary to the GitHub Actions job summary
      - name: Add Test Summary to Workflow
        if: always()
        shell: bash
        run: |
          SUMMARY="${{ steps.variables.outputs.output-folder }}/SummaryGithub.md"
          if [ -f "$SUMMARY" ]; then
            cat "$SUMMARY" >> $GITHUB_STEP_SUMMARY
          else
            echo "No SummaryGithub.md found"
          fi

      # 4) Post (or update) a sticky comment on the PR with the same summary
      - name: Add Test Summary to PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: Test Summary
          recreate: true
          path: ${{ steps.variables.outputs.output-folder }}/SummaryGithub.md

      # 5) Still upload the full HTML report as an artifact
      - name: Upload code coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coveragereport
          path: ${{ steps.variables.outputs.output-folder }}
